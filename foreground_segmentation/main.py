import argparse
import os
import time

import cv2
import numpy as np


def main(image_path, iter_count):
    image = cv2.imread(image_path)
    mask = np.zeros(image.shape[:2], dtype='uint8')
    rect = (1, 1, image.shape[0], image.shape[1])

    fg_model = np.zeros((1, 65), dtype='float')
    bg_model = np.zeros((1, 65), dtype='float')

    start = time.time()
    mask, bg_model, fg_model = cv2.grabCut(
        image,
        mask,
        rect,
        bg_model,
        fg_model,
        iterCount=iter_count,
        mode=cv2.GC_INIT_WITH_RECT,
    )
    end = time.time()
    print(f'[INFO] applying GrabCut took {end-start:.2f} seconds')

    outputMask = np.where((mask == cv2.GC_BGD) | (mask == cv2.GC_PR_BGD), 0, 1)
    outputMask = (outputMask * 255).astype('uint8')

    # apply a bitwise AND to the image using our mask generated by
    # GrabCut to generate our final output image
    output = cv2.bitwise_and(image, image, mask=outputMask)

    cv2.imshow('Input', image)
    cv2.imshow('GrabCut Mask', outputMask)
    cv2.imshow('GrabCut Output', output)
    cv2.waitKey(0)


if __name__ == '__main__':
    ap = argparse.ArgumentParser()
    curr_dir = os.path.dirname(os.path.abspath(__file__))
    ap.add_argument(
        '-i',
        '--image',
        type=str,
        default=os.path.join(curr_dir, '..', 'images', 'link.png'),
        help='input image path to apply GrabCut',
    )
    ap.add_argument(
        '-c',
        '--iter',
        type=int,
        default=10,
        help='# of GrabCut iterations (larger value => slower runtime)',
    )
    args = vars(ap.parse_args())
    main(args['image'], args['iter'])
